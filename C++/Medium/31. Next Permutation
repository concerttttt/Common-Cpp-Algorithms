//solution 1

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int left = -1;
        for(int i = nums.size() - 2;i >= 0;i--)
        {
            if(nums[i] < nums[i+1])
            {
                left = i;
                break;
            }
        }
        if(left == -1)
        {
            reverse(nums.begin(),nums.end());
            return;
        }
        int right = -1;
        for(int i = nums.size() - 1;i > left;i--)
        {
            if(nums[i] > nums[left])
            {
                right = i;
                break;
            }
        }
        swap(nums[left],nums[right]);
        reverse(nums.begin() + left + 1,nums.end());
        return;
    }
};

//solution 2
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int left;
        for(left = nums.size() -2;left >= 0;left--)
            if(nums[left] < nums[left+1])   break;
        reverse(nums.begin() + left + 1,nums.end());
        if(left == -1)  return;
        auto iter = upper_bound(nums.begin() + left,nums.end(),nums[left]);
        swap(nums[left],*iter);
    }
};
