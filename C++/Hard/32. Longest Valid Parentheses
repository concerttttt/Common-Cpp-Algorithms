class Solution {
public:
    int longestValidParentheses(string s) {
        int res = 0;
        if(s.size() < 2)    return res;
        stack<int>  st;
        for(int i = 0;i < s.size();i++)
        {
            if(s[i] == '(') 
                st.push(i);
            else
            {
                if(st.empty())
                    st.push(i);
                else
                {
                    if(s[st.top()] == '(')
                    {
                        st.pop();
                        res = max(res,i - (st.empty() ? -1 : st.top()));
                    }
                    else
                        st.push(i);
                }
            }
        }
        return res;
    }
};

class Solution {
public:
    int longestValidParentheses(string s) {
        if(s.size() < 2)    return 0;
        int res = 0;
        vector<int> st(s.size(),0);
        for(int i = 1;i < s.size();i++)
        {
            if(s[i] == ')')
                if(s[i-1] == '(')
                {
                    if(i-2 >= 0)
                        st[i] = st[i-2] + 2;
                    else
                        st[i] = 2;
                    res = max(res,st[i]);
                }
                else
                {
                    if((i - st[i-1] - 1) >= 0 && s[i-st[i-1] - 1] == '(' )
                    {
                        if((i-st[i-1] - 2) >= 0)
                            st[i] = st[i-1] + 2 + st[i-st[i-1] - 2];
                        else
                            st[i] = st[i-1] + 2;
                        res = max(res,st[i]);
                    }
                }
        }
        return res;
    }
};
