/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* l1,ListNode* l2)
    {
        ListNode* head = new ListNode(0);
        ListNode* curr = head;
        while(l1 && l2)
        {
            if(l1->val < l2->val)
            {
                curr->next = l1;
                l1 = l1->next;
            }
            else
            {
                curr->next = l2;
                l2 = l2->next;
            }
            curr = curr->next;
        }
        if(l1) curr->next = l1;
        if(l2) curr->next = l2;
        return head->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty())   return NULL;
        int n = lists.size();
        while(n > 1)
        {
            int k = (n+1) / 2;
            for(int i = 0;i < n / 2;i++)
                lists[i] = merge(lists[i],lists[i+k]);
            
            n = k;
        }
        return lists[0];
    }
};
