//solution 1
class Solution {
public:
    bool isValid(vector<vector<char>>&board,int i,int j)
    {
        for(int row = 0;row < 9;row++)
            if(row != i && board[row][j] == board[i][j])
                return false;
        
        for(int col = 0;col < 9;col++)
            if(col != j && board[i][col] == board[i][j])
                return false;
                
        for(int row = i / 3 * 3;row < i / 3 * 3 + 3;row++)
            for(int col = j / 3 * 3;col < j / 3 * 3 + 3;col++)
                if((row != i || col != j) && board[row][col] == board[i][j])
                    return false;
                    
        return true;
    }
    bool solver(vector<vector<char>>& board,int i,int j)
    {
        if(i == 9)  return true;
        if(j >= 9)  return solver(board,i+1,0);
        if(board[i][j] == '.')
        {
            for(int k = 1;k <= 9;k++)
            {
                board[i][j] = (char)(k + '0');
                if(isValid(board,i,j))
                    if(solver(board,i,j+1))
                        return true;
                board[i][j] = '.';
            }
        }
        else
            return solver(board,i,j+1);
            
        return false;
    }
    void solveSudoku(vector<vector<char>>& board) {
        if(board.empty() || board.size() != 9 || board[0].size() != 9)    return;
        solver(board,0,0);
    }
};

//solution 2
class Solution {
public:
    bool row[9][10];
    bool col[9][10];
    bool grid[3][3][10];
    bool solve(vector<vector<char>>&board,int i,int j)
    {
        if(i >= 9)  return true;
        if(board[i][j] != '.')
            return solve(board,i+(j+1)/9,(j+1)%9);
        for(int k = 1;k <= 9;k++)
            if(!row[i][k] && !col[j][k] && !grid[i/3][j/3][k])
            {
                board[i][j] = char(k + '0');
                row[i][k] = true;
                col[j][k] = true;
                grid[i/3][j/3][k] = true;
                if(solve(board,i+(j+1)/9,(j+1)%9))  return true;
                row[i][k] = false;
                col[j][k] = false;
                grid[i/3][j/3][k] = false;
                board[i][j] = '.';
            }
        return false;
    }
    void solveSudoku(vector<vector<char>>& board) {
        memset(row,0,sizeof(row));
        memset(col,0,sizeof(col));
        memset(grid,0,sizeof(grid));
        for(int i = 0;i < 9;i++)
            for(int j = 0;j < 9;j++)
                if(board[i][j] != '.')
                {
                    row[i][board[i][j] - '0'] = true;
                    col[j][board[i][j] - '0'] = true;
                    grid[i/3][j/3][board[i][j] - '0'] = true;
                }
        solve(board,0,0);
    }
};
