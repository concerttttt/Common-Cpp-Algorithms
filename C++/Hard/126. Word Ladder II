//this is a workable solution, but can't pass all test cases, TLE still arise.
class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, unordered_set<string> &wordList) {
        vector<vector<string>>  ans;
        queue<vector<string>>   paths;
        paths.push({beginWord});
        wordList.insert(endWord);
        unordered_set<string>  visited;
        int minLevel = INT_MAX, level = 1;
        
        while(!paths.empty())
        {
            vector<string>  path = paths.front();
            paths.pop();
            if(path.size() > level)
            {
                for(auto s:visited) wordList.erase(s);  
                visited.clear();
                if(path.size() > minLevel)  break;
                else    level = path.size();
            }
            
            for(int i = 0; i < path.back().size();i++)
            {
                string last = path.back();
                for(char c = 'a'; c <= 'z';c++)
                {
                    last[i] = c;
                    if(wordList.find(last) != wordList.end())
                    {
                        vector<string>  new_path = path;
                        new_path.push_back(last);
                        visited.insert(last);
                        if(last == endWord)
                        {
                            minLevel = level;
                            ans.push_back(new_path);
                        }
                        else
                            paths.push(new_path);
                    }
                }
            }
        }
        return ans;
    }
};

//solution 2, all test case past solution.
